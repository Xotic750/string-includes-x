{"version":3,"sources":["../src/string-includes-x.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,sBAAP,MAAmC,4BAAnC;AACA,OAAO,SAAP,MAAsB,cAAtB;AAEA,IAAM,YAAY,GAAG,EAArB;AACA,IAAM,EAAE,GAAG,YAAY,CAAC,QAAxB;AACA,IAAM,cAAc,GAAG,OAAO,EAAP,KAAc,UAAd,IAA4B,EAAnD;;AAEA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,SAAO,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,cAApB,EAAoC,GAApC,EAAyC,KAAhD;AACD,CAFD;;AAIA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,cAApB,EAAoC,GAApC,EAAyC,QAAzC,CAAZ;AAEA,SAAO,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,GAAG,CAAC,KAAJ,KAAc,KAA5C;AACD,CAJD;;AAMA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,EAAkB,cAAlB,EAAkC,GAAlC,CAAZ;AAEA,SAAO,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,GAAG,CAAC,KAAJ,KAAc,IAA5C;AACD,CAJD;;AAMA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,cAAnB,EAAmC,GAAnC,CAAZ;AAEA,SAAO,GAAG,CAAC,KAAX;AACD,CAJD;;AAMA,IAAM,SAAS,GAAG,SAAS,CAAC,cAAD,CAAT,IAA6B,KAAK,EAAlC,IAAwC,KAAK,EAA7C,IAAmD,KAAK,EAAxD,IAA8D,KAAK,EAArF;AACA,OAAO,CAAC,GAAR,CAAY,SAAZ;;AACA,IAAM,eAAe,GAAG,SAAS,eAAT,GAA2B;AACjD,SAAO,SAAS,QAAT,CAAkB,MAAlB,EAA0B,YAA1B,EAAwC;AAC7C,QAAM,IAAI,GAAG,CAAC,YAAD,CAAb;;AAEA,QAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,SAAS,CAAC,CAAD,CAAnB;AACD;;AAED,WAAO,cAAc,CAAC,KAAf,CAAqB,MAArB,EAA6B,IAA7B,CAAP;AACD,GATD;AAUD,CAXD;;AAaA,IAAM,cAAc,GAAG,SAAS,cAAT,GAA0B;AAAA,MACxC,OADwC,GAC7B,YAD6B,CACxC,OADwC;AAG/C,SAAO,SAAS,QAAT,CAAkB,MAAlB,EAA0B,YAA1B,EAAwC;AAC7C,QAAM,GAAG,GAAG,KAAK,CAAC,sBAAsB,CAAC,MAAD,CAAvB,CAAjB;;AAEA,QAAI,QAAQ,CAAC,YAAD,CAAZ,EAA4B;AAC1B,YAAM,IAAI,SAAJ,CAAc,qCAAd,CAAN;AACD;;AAED,QAAM,IAAI,GAAG,CAAC,KAAK,CAAC,YAAD,CAAN,CAAb;;AAEA,QAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,SAAS,CAAC,CAAD,CAAnB;AACD,KAZ4C,CAc7C;;;AACA,WAAO,OAAO,CAAC,KAAR,CAAc,GAAd,EAAmB,IAAnB,MAA6B,CAAC,CAArC;AACD,GAhBD;AAiBD,CApBD;AAsBA;;;;;;;;;;;;;;;;AAcA,IAAM,SAAS,GAAG,SAAS,GAAG,eAAe,EAAlB,GAAuB,cAAc,EAAhE;AAEA,eAAe,SAAf","file":"string-includes-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport isRegExp from 'is-regexp-x';\nimport toStr from 'to-string-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport toBoolean from 'to-boolean-x';\n\nconst EMPTY_STRING = '';\nconst ni = EMPTY_STRING.includes;\nconst nativeIncludes = typeof ni === 'function' && ni;\n\nconst test1 = function test1() {\n  return attempt.call('/a/', nativeIncludes, /a/).threw;\n};\n\nconst test2 = function test2() {\n  const res = attempt.call('abc', nativeIncludes, 'a', Infinity);\n\n  return res.threw === false && res.value === false;\n};\n\nconst test3 = function test3() {\n  const res = attempt.call(123, nativeIncludes, '2');\n\n  return res.threw === false && res.value === true;\n};\n\nconst test4 = function test4() {\n  const res = attempt.call(null, nativeIncludes, 'u');\n\n  return res.threw;\n};\n\nconst isWorking = toBoolean(nativeIncludes) && test1() && test2() && test3() && test4();\nconsole.log(isWorking);\nconst patchedIncludes = function patchedIncludes() {\n  return function includes(string, searchString) {\n    const args = [searchString];\n\n    if (arguments.length > 2) {\n      /* eslint-disable-next-line prefer-rest-params,prefer-destructuring */\n      args[1] = arguments[2];\n    }\n\n    return nativeIncludes.apply(string, args);\n  };\n};\n\nconst implementation = function implementation() {\n  const {indexOf} = EMPTY_STRING;\n\n  return function includes(string, searchString) {\n    const str = toStr(requireObjectCoercible(string));\n\n    if (isRegExp(searchString)) {\n      throw new TypeError('\"includes\" does not accept a RegExp');\n    }\n\n    const args = [toStr(searchString)];\n\n    if (arguments.length > 2) {\n      /* eslint-disable-next-line prefer-rest-params,prefer-destructuring */\n      args[1] = arguments[2];\n    }\n\n    // Somehow this trick makes method 100% compat with the spec.\n    return indexOf.apply(str, args) !== -1;\n  };\n};\n\n/**\n * This method determines whether one string may be found within another string,\n * returning true or false as appropriate.\n *\n * @param {string} string - The target string.\n * @throws {TypeError} If target is null or undefined.\n * @param {string} searchString - A string to be searched for within the\n *  target string.\n * @throws {TypeError} If searchString is a RegExp.\n * @param {number} [position] -The position within the string at which to begin\n *  searching for searchString.(defaults to 0).\n * @returns {boolean} `true` if the given string is found anywhere within the\n *  search string; otherwise, `false` if not.\n */\nconst $includes = isWorking ? patchedIncludes() : implementation();\n\nexport default $includes;\n"]}